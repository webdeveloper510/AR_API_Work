"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.symbolWriterForPath = exports.symbolReaderForPath = exports.NodeIndex = void 0;
const directoryfilesystem_1 = require("./directoryfilesystem");
const unwrappedsymbol_1 = require("./unwrappedsymbol");
const zipfile_1 = require("./zipfile");
const manifestfilesystem_1 = require("./manifestfilesystem");
const standardsymbol_1 = require("./standardsymbol");
const debug = require("debug");
const fs = require("fs-extra");
const path_1 = require("path");
const dbg = debug("zpp");
class NodeIndex {
    constructor(spec) {
        this._nodeById = {};
        this._scripts = [];
        this._indexNode(spec.hierarchy);
    }
    _indexNode(n) {
        this._nodeById[n.id] = n;
        if (n.nodeType === "Script")
            this._scripts.push(n);
        for (let child of n.children) {
            this._indexNode(child);
        }
    }
    getScripts() {
        return this._scripts;
    }
    getNodeById(id) {
        return this._nodeById[id];
    }
}
exports.NodeIndex = NodeIndex;
async function symbolReaderForPath(inputPath) {
    let stat = await fs.stat(inputPath);
    if (stat.isDirectory()) {
        try {
            let res = await fs.readFile(path_1.posix.join(inputPath, ".seproj"));
            let contents = res.toString();
            if (contents.startsWith("2")) {
                let input = new directoryfilesystem_1.DirectoryFileSystemReader(inputPath);
                let manifest = new manifestfilesystem_1.ManifestFileSystemReader(input);
                let current = await manifest.getCurrent();
                dbg("Detected raw Studio directory source: %s", inputPath);
                return new standardsymbol_1.StandardSymbolReader(current, "root");
            }
        }
        catch (e) { }
        let input = new directoryfilesystem_1.DirectoryFileSystemReader(inputPath);
        dbg("Detected unwrapped project source: %s", inputPath);
        return new unwrappedsymbol_1.UnwrappedSymbolReader(input, "");
    }
    let input = new zipfile_1.ZIPFileReader(inputPath);
    let manifest = new manifestfilesystem_1.ManifestFileSystemReader(input);
    let current = await manifest.getCurrent();
    dbg("Detected ZPP input %s", inputPath);
    return new standardsymbol_1.StandardSymbolReader(current, "");
}
exports.symbolReaderForPath = symbolReaderForPath;
async function symbolWriterForPath(outputPath) {
    let ext = path_1.posix.extname(outputPath);
    if (ext.toLocaleLowerCase() === ".zpp") {
        dbg("Outputting destination as ZPP: %s", outputPath);
        let zip = new zipfile_1.ZIPFileWriter(outputPath);
        let mfs = new manifestfilesystem_1.ManifestFileSystemWriter(zip);
        let current = await mfs.getCurrent();
        return new standardsymbol_1.StandardSymbolWriter(current, "");
    }
    else {
        dbg("Outputting destination as unwrapped directory: %s", outputPath);
        let destinationDirectory = new directoryfilesystem_1.DirectoryFileSystemWriter(outputPath);
        return new unwrappedsymbol_1.UnwrappedSymbolWriter(destinationDirectory, "");
    }
}
exports.symbolWriterForPath = symbolWriterForPath;
