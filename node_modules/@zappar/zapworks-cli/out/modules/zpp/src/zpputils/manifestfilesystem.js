"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapshotFileSystemWriter = exports.ManifestFileSystemWriter = exports.ManifestFileSystemReader = void 0;
const crypto = require("crypto");
class ManifestFileSystemReader {
    constructor(source) {
        this._source = source;
    }
    getCurrent() {
        return this.getSnapshot("current");
    }
    async getSnapshot(name) {
        let manifestBuffer = await this._source.getFile(name + ".json");
        let manifestJSON = JSON.parse(manifestBuffer.toString());
        if (!manifestJSON["Entries"])
            throw "Unable to load snapshot with this name: " + name;
        return new SnapshotFileSystemReader(this._source, manifestJSON);
    }
}
exports.ManifestFileSystemReader = ManifestFileSystemReader;
class SnapshotFileSystemReader {
    constructor(source, manifest) {
        this._source = source;
        this._manifest = manifest;
    }
    getFile(name) {
        let entry = this._manifest.Entries[name];
        if (!entry)
            throw "File not found: " + name;
        return this._source.getFile("store/" + entry);
    }
}
class ManifestFileSystemWriter {
    constructor(destination) {
        this._destination = destination;
    }
    getCurrent() {
        return this.getSnapshot("current");
    }
    getSnapshot(name) {
        return new SnapshotFileSystemWriter(this._destination, name);
    }
}
exports.ManifestFileSystemWriter = ManifestFileSystemWriter;
class SnapshotFileSystemWriter {
    constructor(destination, snapshotName) {
        this._manifest = { Entries: {} };
        this._destination = destination;
        this._snapshotName = snapshotName;
    }
    async putFile(filename, contents) {
        let hasher = crypto.createHash("md5");
        hasher.update(contents);
        let md5 = hasher.digest().toString("hex");
        filename = filename.replace("\\", "/");
        this._manifest.Entries[filename] = md5;
        await this._destination.putFile("store/" + md5, contents);
    }
    async save() {
        let manifestFile = JSON.stringify(this._manifest);
        await this._destination.putFile(this._snapshotName + ".json", Buffer.from(manifestFile));
        await this._destination.save();
    }
}
exports.SnapshotFileSystemWriter = SnapshotFileSystemWriter;
