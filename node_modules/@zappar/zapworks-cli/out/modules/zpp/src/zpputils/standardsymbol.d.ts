/// <reference types="node" />
import * as SE from "../zcompiler/zlibs/spec";
import { ISymbolReader, ISymbolWriter } from "./isymbol";
import { IWriteFileSystem, IReadFileSystem } from "./ifilesystem";
export declare class StandardSymbolReader implements ISymbolReader {
    private _fs;
    private _basePath;
    private _structure;
    private _index;
    constructor(fs: IReadFileSystem, basePath: string);
    getSpec(): Promise<SE.SymbolDefinitionSpec>;
    getScriptContents(node: SE.HierarchyNodeSpec): Promise<string | undefined>;
    getScripts(): Promise<SE.HierarchyNodeSpec[]>;
    getMediaFileContents(mf: SE.MediaFileSpec): Promise<Buffer>;
    getSubsymbol(id: string): Promise<StandardSymbolReader>;
}
export declare class StandardSymbolWriter implements ISymbolWriter {
    private _fs;
    private _basePath;
    constructor(fs: IWriteFileSystem, basePath: string);
    copyFrom(input: ISymbolReader): Promise<void>;
    save(): Promise<void>;
}
