"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardSymbolWriter = exports.StandardSymbolReader = void 0;
const path_1 = require("path");
const utils_1 = require("./utils");
class StandardSymbolReader {
    constructor(fs, basePath) {
        this._fs = fs;
        this._basePath = basePath;
    }
    async getSpec() {
        if (this._structure)
            return this._structure;
        let file = await this._fs.getFile(path_1.posix.join(this._basePath, "structure.json"));
        let json = JSON.parse(file.toString());
        this._structure = json;
        this._index = new utils_1.NodeIndex(this._structure);
        return this._structure;
    }
    async getScriptContents(node) {
        if (node.nodeType !== "Script")
            throw "Node is not a script: " + node.id;
        return node.parameters["code"];
    }
    async getScripts() {
        await this.getSpec();
        return this._index.getScripts();
    }
    async getMediaFileContents(mf) {
        let filename = mf.filename || mf.title;
        if (mf.id === filename.toLowerCase())
            filename = mf.id;
        return await this._fs.getFile(path_1.posix.join(this._basePath, filename));
    }
    async getSubsymbol(id) {
        let structure = await this.getSpec();
        for (let entry of structure.symbolDefinitions) {
            if (!entry)
                continue;
            if (entry.id === id) {
                return new StandardSymbolReader(this._fs, path_1.posix.join(this._basePath, entry.src));
            }
        }
        throw "Unable to find symbol ID: " + id;
    }
}
exports.StandardSymbolReader = StandardSymbolReader;
class StandardSymbolWriter {
    constructor(fs, basePath) {
        this._fs = fs;
        this._basePath = basePath;
    }
    async copyFrom(input) {
        let promises = [];
        let spec = JSON.parse(JSON.stringify(await input.getSpec()));
        let indx = new utils_1.NodeIndex(spec);
        let scripts = indx.getScripts();
        for (let script of scripts) {
            let scriptContents = await input.getScriptContents(script);
            script.parameters["code"] = scriptContents;
        }
        for (let mf of spec.mediaFiles) {
            let mfcontents = await input.getMediaFileContents(mf);
            let filename = mf.filename || mf.title;
            if (mf.id === filename.toLowerCase())
                filename = mf.id;
            promises.push(this._fs.putFile(path_1.posix.join(this._basePath, filename), Buffer.from(mfcontents)));
        }
        for (let entry of spec.symbolDefinitions) {
            if (!entry)
                continue;
            let sym = await input.getSubsymbol(entry.id);
            let subsymbol = new StandardSymbolWriter(this._fs, path_1.posix.join(this._basePath, entry.src));
            promises.push(subsymbol.copyFrom(sym));
        }
        promises.push(this._fs.putFile(path_1.posix.join(this._basePath, "structure.json"), Buffer.from(JSON.stringify(spec))));
        await Promise.all(promises);
    }
    save() {
        return this._fs.save();
    }
}
exports.StandardSymbolWriter = StandardSymbolWriter;
