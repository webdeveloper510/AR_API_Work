"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.actionEventsByNodeType = exports.isEnterHeadsetMode = exports.isUseRearCamera = exports.isUseFrontCamera = exports.isTakeSnapshot = exports.isPlayFullscreenVideo = exports.isStopTimeline = exports.isPlayTimeline = exports.isActivateState = exports.isVibrateDevice = exports.isLaunchWebLink = exports.isBlock = exports.StatementType = void 0;
var StatementType;
(function (StatementType) {
    StatementType["Block"] = "Block";
    StatementType["LaunchWebLink"] = "LaunchWebLink";
    StatementType["VibrateDevice"] = "Vibrate";
    StatementType["ActivateState"] = "ActivateState";
    StatementType["PlayTimeline"] = "PlayTimeline";
    StatementType["StopTimeline"] = "StopTimeline";
    StatementType["PlayFullscreenVideo"] = "PlayFullscreenVideo";
    StatementType["TakeSnapshot"] = "TakeSnapshot";
    StatementType["UseFrontCamera"] = "UseFrontFacingCamera";
    StatementType["UseRearCamera"] = "UseRearFacingCamera";
    StatementType["EnterHeadsetMode"] = "EnterHeadsetMode";
})(StatementType = exports.StatementType || (exports.StatementType = {}));
var isBlock = (s) => {
    return s.type === StatementType.Block;
};
exports.isBlock = isBlock;
var isLaunchWebLink = (s) => {
    return s.type === StatementType.LaunchWebLink;
};
exports.isLaunchWebLink = isLaunchWebLink;
var isVibrateDevice = (s) => {
    return s.type === StatementType.VibrateDevice;
};
exports.isVibrateDevice = isVibrateDevice;
var isActivateState = (s) => {
    return s.type === StatementType.ActivateState;
};
exports.isActivateState = isActivateState;
var isPlayTimeline = (s) => {
    return s.type === StatementType.PlayTimeline;
};
exports.isPlayTimeline = isPlayTimeline;
var isStopTimeline = (s) => {
    return s.type === StatementType.StopTimeline;
};
exports.isStopTimeline = isStopTimeline;
var isPlayFullscreenVideo = (s) => {
    return s.type === StatementType.PlayFullscreenVideo;
};
exports.isPlayFullscreenVideo = isPlayFullscreenVideo;
var isTakeSnapshot = (s) => {
    return s.type === StatementType.TakeSnapshot;
};
exports.isTakeSnapshot = isTakeSnapshot;
var isUseFrontCamera = (s) => {
    return s.type === StatementType.UseFrontCamera;
};
exports.isUseFrontCamera = isUseFrontCamera;
var isUseRearCamera = (s) => {
    return s.type === StatementType.UseRearCamera;
};
exports.isUseRearCamera = isUseRearCamera;
var isEnterHeadsetMode = (s) => {
    return s.type === StatementType.EnterHeadsetMode;
};
exports.isEnterHeadsetMode = isEnterHeadsetMode;
exports.actionEventsByNodeType = {
    "Object": {
        "Tap": "pointerdown",
        "TriggerRegionEnter": "triggerenter",
        "TriggerRegionLeave": "triggerleave"
    },
    "Root": {
        "Show": "show",
        "Hide": "hide"
    },
    "Target": {
        "Seen": "seen",
        "FirstSeen": {
            eventName: "seen",
            one: true
        },
        "NotSeen": "notseen"
    },
    "Accelerometer": {
        "Landscape": "landscape",
        "Portrait": "portrait",
        "LandscapeInverted": "landscapeinverted",
        "PortraitInverted": "portraitinverted",
    },
    "Audio": {
        "Finish": "finish"
    },
    "VideoTexture": {
        "Finish": "finish"
    },
    "Video": {
        "Finish": "finish",
        "Buffering": "buffering",
        "Error": "error",
        "Pause": "pause",
        "Playing": "playing"
    },
    "Raycaster": {
        "IntersectionEnter": "intersectionenter",
        "IntersectionLeave": "intersectionleave",
    },
    "TriggerRegion": {
        "TriggerEnter": "triggerenter",
        "TriggerLeave": "triggerleave"
    },
    "HeadsetManager": {
        "HeadsetModeEnter": "headsetenter",
        "HeadsetModeLeave": "headsetleave",
        "HeadsetButtonPress": "headsetbutton"
    },
    "ZapBoxMap": {
        "Seen": "seen",
        "FirstSeen": {
            eventName: "seen",
            one: true
        },
        "NotSeen": "notseen",
    },
    "ZapBoxController": {
        "Seen": "seen",
        "FirstSeen": {
            eventName: "seen",
            one: true
        },
        "NotSeen": "notseen",
    },
    "FaceGroup": {
        "Seen": "seen",
        "FirstSeen": {
            eventName: "seen",
            one: true
        },
        "NotSeen": "notseen",
        "MouthOpen": "mouthopen",
        "MouthClose": "mouthclose",
        "LeftEyeOpen": "lefteyeopen",
        "LeftEyeClose": "lefteyeclose",
        "RightEyeOpen": "righteyeopen",
        "RightEyeClose": "righteyeclose"
    },
    "FacePaint": {
        "Seen": "seen",
        "FirstSeen": {
            eventName: "seen",
            one: true
        },
        "NotSeen": "notseen",
        "MouthOpen": "mouthopen",
        "MouthClose": "mouthclose",
        "LeftEyeOpen": "lefteyeopen",
        "LeftEyeClose": "lefteyeclose",
        "RightEyeOpen": "righteyeopen",
        "RightEyeClose": "righteyeclose"
    }
};
