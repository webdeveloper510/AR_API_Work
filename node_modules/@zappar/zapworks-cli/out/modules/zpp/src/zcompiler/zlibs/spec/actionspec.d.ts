export declare enum StatementType {
    Block = "Block",
    LaunchWebLink = "LaunchWebLink",
    VibrateDevice = "Vibrate",
    ActivateState = "ActivateState",
    PlayTimeline = "PlayTimeline",
    StopTimeline = "StopTimeline",
    PlayFullscreenVideo = "PlayFullscreenVideo",
    TakeSnapshot = "TakeSnapshot",
    UseFrontCamera = "UseFrontFacingCamera",
    UseRearCamera = "UseRearFacingCamera",
    EnterHeadsetMode = "EnterHeadsetMode"
}
export interface Action {
    eventName: string;
    rootStatement: Block;
}
export interface BaseStatement {
    id: string;
    type: string;
}
export declare type Statement = Block | LaunchWebLink | VibrateDevice | ActivateState | PlayTimeline | StopTimeline | PlayFullscreenVideo | TakeSnapshot | UseFrontCamera | UseRearCamera | EnterHeadsetMode;
export interface Block extends BaseStatement {
    type: StatementType.Block;
    statements: Statement[];
}
export interface LaunchWebLink extends BaseStatement {
    type: StatementType.LaunchWebLink;
    url: string;
    useExternalBrowser: boolean;
}
export interface VibrateDevice extends BaseStatement {
    type: StatementType.VibrateDevice;
}
export interface ActivateState extends BaseStatement {
    type: StatementType.ActivateState;
    controllerId: string;
    stateId: string;
}
export interface PlayTimeline extends BaseStatement {
    type: StatementType.PlayTimeline;
    controllerId: string;
    timelineId: string;
    fromStart: boolean;
    loop: boolean;
}
export interface StopTimeline extends BaseStatement {
    type: StatementType.StopTimeline;
    controllerId: string;
    timelineId: string;
}
export interface PlayFullscreenVideo extends BaseStatement {
    type: StatementType.PlayFullscreenVideo;
    url: string;
}
export interface TakeSnapshot extends BaseStatement {
    type: StatementType.TakeSnapshot;
}
export interface UseFrontCamera extends BaseStatement {
    type: StatementType.UseFrontCamera;
}
export interface UseRearCamera extends BaseStatement {
    type: StatementType.UseRearCamera;
}
export interface EnterHeadsetMode extends BaseStatement {
    type: StatementType.EnterHeadsetMode;
}
export declare var isBlock: (s: Statement) => s is Block;
export declare var isLaunchWebLink: (s: Statement) => s is LaunchWebLink;
export declare var isVibrateDevice: (s: Statement) => s is VibrateDevice;
export declare var isActivateState: (s: Statement) => s is ActivateState;
export declare var isPlayTimeline: (s: Statement) => s is PlayTimeline;
export declare var isStopTimeline: (s: Statement) => s is StopTimeline;
export declare var isPlayFullscreenVideo: (s: Statement) => s is PlayFullscreenVideo;
export declare var isTakeSnapshot: (s: Statement) => s is TakeSnapshot;
export declare var isUseFrontCamera: (s: Statement) => s is UseFrontCamera;
export declare var isUseRearCamera: (s: Statement) => s is UseRearCamera;
export declare var isEnterHeadsetMode: (s: Statement) => s is EnterHeadsetMode;
export interface ActionEventSpec {
    eventName: string;
    one: boolean;
}
export declare let actionEventsByNodeType: {
    [nodeType: string]: {
        [id: string]: string | undefined | ActionEventSpec;
    } | undefined;
};
