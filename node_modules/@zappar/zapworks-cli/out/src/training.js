"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const imagetraining_1 = require("@zappar/imagetraining");
const chalk = require("chalk");
const fs_1 = require("fs");
const path = require("path");
const promise_fs_1 = require("promise-fs");
const chalk_1 = require("chalk");
const image_size_1 = require("./util/image-size");
const cliProgress = require('cli-progress');
const isdirectory = require('is-directory');
async function trainImage(settings) {
    const { input, output } = settings;
    await (0, promise_fs_1.access)(input, fs_1.constants.R_OK);
    console.log('Training the image - this may take a few moments...');
    const userHasDefinedRadius = settings.topRadius || settings.bottomRadius || settings.circumference || settings.radius;
    if (settings.curved && !userHasDefinedRadius) {
        const scale = await (0, image_size_1.default)(input);
        if (!scale || !scale.width || !scale.height) {
            throw new Error(`Could not determine the size of the image ${input}`);
        }
        settings.circumference = `${scale.width}px`;
    }
    const progressBar = new cliProgress.Bar({
        format: `Training |${(0, chalk_1.cyan)('{bar}')}| {percentage}% | ETA: {eta}s | {value}/{total}`,
    }, cliProgress.Presets.rect);
    const progressCallback = (progress) => {
        if (progress === 1) {
            progressBar.start(100, 0);
        }
        progressBar.update(progress);
        if (progress === 100) {
            progressBar.stop();
        }
    };
    settings.onTrainProgress = progressCallback;
    const buffer = await (0, imagetraining_1.train)(settings.input, settings);
    let finalPath = output;
    if (isdirectory.sync(output)) {
        const inputAbsolute = path.resolve(input);
        let filename = path.basename(inputAbsolute);
        filename = filename.replace(/^.*[\\/]/, '').replace(/\.[^/.]+$/, '');
        finalPath = path.join(finalPath, `${filename}.zpt`);
    }
    await (0, promise_fs_1.writeFile)(finalPath, buffer);
    chalk.green('Success');
}
exports.default = trainImage;
