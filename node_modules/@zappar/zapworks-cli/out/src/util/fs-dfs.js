"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs = require("promise-fs");
class FileInDirectoryBFS {
    constructor(directory, targetFiles) {
        this.pathQueue = [];
        this.targetFiles = [];
        this.getDirectoryDepth = (dir) => dir.split('/').length || dir.split(/\\$/).length;
        this.getSubDirectories = async (path) => {
            let dirs = [];
            for (const file of await fs.readdir(path)) {
                if ((await fs.stat((0, path_1.join)(path, file))).isDirectory()) {
                    dirs = [...dirs, file];
                }
            }
            return dirs;
        };
        this.directory = directory;
        this.targetFiles = targetFiles;
    }
    async fileExistsInDirectory(directory) {
        const fileList = await fs.readdir(directory);
        let foundIndex = false;
        for (let i = 0; i < this.targetFiles.length; i += 1) {
            const targetName = this.targetFiles[i];
            foundIndex = !!fileList.find((fileName) => fileName.toLowerCase().includes(targetName));
            if (foundIndex)
                return true;
        }
        return false;
    }
    async SearchFiles(maxDepth = 5) {
        const pathQueue = [this.directory];
        let workingPath = '';
        let solved = false;
        const startingDepth = this.getDirectoryDepth(this.directory);
        while (!solved && pathQueue.length > 0) {
            workingPath = pathQueue.shift();
            if (this.getDirectoryDepth(workingPath) - startingDepth === maxDepth) {
                return {
                    locatedInRoot: false,
                    fileLocation: undefined,
                };
            }
            const subDirectories = await this.getSubDirectories(workingPath);
            for (let i = 0; i < subDirectories.length; i += 1) {
                const directory = subDirectories[i];
                pathQueue.push((0, path_1.join)(workingPath, directory));
            }
            solved = await this.fileExistsInDirectory(workingPath);
        }
        return {
            locatedInRoot: workingPath === this.directory,
            fileLocation: solved ? workingPath : undefined,
        };
    }
}
exports.default = FileInDirectoryBFS;
