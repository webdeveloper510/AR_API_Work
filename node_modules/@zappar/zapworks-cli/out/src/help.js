"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
function showHelp() {
    console.log(`
$ ${chalk.hex('FF5733').bold('zapworks')} serve <dir> [${chalk.cyan('--lan')}] [${chalk.cyan('--port 4000')}]
  Serve directory over https.

$ ${chalk.hex('FF5733').bold('zapworks')} train <img> [${chalk.cyan('-o')} <outzpt>] [${chalk.cyan('--radius')} 0] [${chalk.cyan('--curved')}] [${chalk.cyan('--dpi')}]
  Outputs .zpt target image file to be used for Image Tracking. Find out more about the options in the readme.

 - Use ${chalk.cyan('--curved')} to wrap the image around the circumference of the image.
 - Use ${chalk.cyan('--radius')} to set the radius of a cylindrical target.
 - Use ${chalk.cyan('--dpi')} to set the DPI of the input image.

$ ${chalk.hex('FF5733').bold('zapworks')} upload ${chalk.cyan('--version')} <1.0.0> ${chalk.cyan('--project')} <zw-project-id> <dir>
  Upload content directory to ZapWorks.

$ ${chalk.hex('FF5733').bold('zapworks')} publish ${chalk.cyan('--version')} <1.0.0> ${chalk.cyan('--project')} <zw-project-id>
  Publish specified project as your active ZapWorks project.

$ ${chalk.hex('FF5733').bold('zapworks')} init [${chalk.cyan('-y')}] <dir>
  Initialise a new project from template.

    ${chalk.cyan('(1). ThreeJS           2. A-Frame             3. React-Three             4. Babylon.js')}
    ${chalk.cyan('(1). Webpack           2. Standalone CDN')}
    ${chalk.cyan('(1). Image Tracking    2. Instant Tracking    3. Face Tracking')}

$ ${chalk.hex('FF5733').bold('zapworks')} zppclean <zppfile>
  Takes a ZPP file (the file format of ZapWorks Studio) and produces a new file without unnecessary or redundant data.
`);
}
exports.default = showHelp;
