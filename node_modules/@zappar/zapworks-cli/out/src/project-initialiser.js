"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const util_1 = require("util");
const stream_1 = require("stream");
const extract = require("extract-zip");
const node_fetch_1 = require("node-fetch");
const del = require("del");
const streamPipeline = (0, util_1.promisify)(stream_1.pipeline);
class CreateTemplate {
    constructor(settings, branch = 'master') {
        this.clone = async () => {
            const archiveName = this.GetArchiveName();
            const url = this.GetURL();
            const response = await (0, node_fetch_1.default)(url);
            if (!response.ok)
                throw new Error(`unexpected response ${response.statusText}`);
            await streamPipeline(response.body, (0, fs_1.createWriteStream)(`${archiveName}.zip`));
            try {
                await extract(`${archiveName}.zip`, {
                    dir: process.cwd(),
                    onEntry: (entry) => {
                        if (entry.fileName.startsWith(`${archiveName}/`)) {
                            entry.fileName = `${this.Parsedsettings.template.initDirectory}/${entry.fileName.replace(`${archiveName}/`, '')}`;
                        }
                    },
                });
                await del([`${process.cwd()}/${archiveName}.zip`, `${process.cwd()}/${archiveName}`]);
            }
            catch (err) {
                console.log(err);
            }
        };
        this.GetArchiveName = () => `zappar-${this.Parsedsettings.template.framework}-${this.Parsedsettings.template.trackingType}-tracking-${this.Parsedsettings.template.bundler}-bootstrap-${this.branch}`;
        this.GetURL = () => {
            const urlLanguageEnd = this.Parsedsettings.template.language === 'javascript' ? '' : '-typescript';
            return `https://codeload.github.com/zappar-xr/zappar-${this.Parsedsettings.template.framework}-${this.Parsedsettings.template.trackingType}-tracking-${this.Parsedsettings.template.bundler}-bootstrap${urlLanguageEnd}/zip/${this.branch}`;
        };
        this.parseInput = (str) => str.toLowerCase().replace(' html', '').replace(' tracking', '');
        this.Parsedsettings = settings;
        this.branch = branch;
        this.Parsedsettings.template.trackingType = this.parseInput(this.Parsedsettings.template.trackingType);
        this.Parsedsettings.template.framework = this.parseInput(this.Parsedsettings.template.framework);
        this.Parsedsettings.template.bundler = this.parseInput(this.Parsedsettings.template.bundler);
        this.Parsedsettings.template.language = this.parseInput(this.Parsedsettings.template.language);
    }
}
exports.default = CreateTemplate;
