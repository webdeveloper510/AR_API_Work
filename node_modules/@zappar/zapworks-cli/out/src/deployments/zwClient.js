"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zw = require("@zappar/zw-api-client");
const chalk_1 = require("chalk");
const cliProgress = require('cli-progress');
class zwClient {
    constructor() {
        this.getZwClient = () => new zw.Client({
            clientId: 'IwCeeCsCp77du7ZfccPuaDnMA2Ec3o42mNL9CdLB',
            env: zw.Environment.Prod,
            debug: false,
        });
        this.uploadCDN = async (zipBuffer) => {
            let started = false;
            const progressBar = new cliProgress.Bar({
                format: `Uploading |${(0, chalk_1.cyan)('{bar}')}| {percentage}%`,
            }, cliProgress.Presets.rect);
            const uploadData = await this.zwClient.zml.uploadFile(zipBuffer, zw.IFileType.UARPackage, (ev) => {
                if (typeof ev === 'number') {
                    if (!started) {
                        console.log('');
                        progressBar.start(100, 0);
                        started = true;
                    }
                    const scaleModifier = 1000000;
                    const value = ev > 0.1 ? ev * 100 : ev * scaleModifier;
                    progressBar.update(Number(value.toFixed(2)));
                    if (ev === 1)
                        progressBar.stop();
                }
            });
            return uploadData.key;
        };
        this.publishCDN = async (parameters) => {
            let res;
            if (parameters.packagekey) {
                res = await this.zwClient.publish(parameters.projectId, {
                    version: parameters.projectVersion,
                    packagekey: parameters.packagekey,
                    enableCrossOriginIsolation: !!parameters.enableCrossOriginIsolation,
                });
            }
            else {
                res = await this.zwClient.publish(parameters.projectId, {
                    version: parameters.projectVersion,
                });
            }
            return res;
        };
        this.createUAVersion = async (parameters) => {
            let res;
            if (parameters.packagekey) {
                res = await this.zwClient.createUARVersion(parameters.projectId, {
                    version: parameters.projectVersion,
                    packagekey: parameters.packagekey,
                    enableCrossOriginIsolation: !!parameters.enableCrossOriginIsolation,
                });
            }
            else {
                res = await this.zwClient.createUARVersion(parameters.projectId, {
                    version: parameters.projectVersion,
                });
            }
            return res;
        };
        this.zwClient = this.getZwClient();
    }
}
exports.default = zwClient;
