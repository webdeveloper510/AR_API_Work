"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cli = void 0;
const arg = require("arg");
const inquirer_1 = require("inquirer");
const chalk_1 = require("chalk");
const path = require("path");
const help_1 = require("./help");
const training_1 = require("./training");
const update_notifier_1 = require("./util/update-notifier");
const serve_1 = require("./serve/serve");
const project_initialiser_1 = require("./project-initialiser");
const deployments_1 = require("./deployments/deployments");
const config_1 = require("./deployments/config");
const zpp_1 = require("./zpp");
const packagejson_1 = require("./deployments/packagejson");
const fs_dfs_1 = require("./util/fs-dfs");
const chalk = require("chalk");
function parseArgumentsIntoOptions(rawArgs) {
    const args = arg({
        '--output': String,
        '--version': String,
        '--project': String,
        '--help': Boolean,
        '--yes': Boolean,
        '--dir': String,
        '--max-height': Number,
        '--max-width': Number,
        '--include-preview': Boolean,
        '--exclude-preview': Boolean,
        '--circumference': String,
        '--radius': String,
        '--top-radius': String,
        '--bottom-radius': String,
        '--side-length': String,
        '--curved': Boolean,
        '--lan': Boolean,
        '--port': Number,
        '--input-width': String,
        '--input-height': String,
        '--dpi': Number,
        '--cross-origin-isolation': Boolean,
        '-y': '--yes',
        '-h': '--help',
        '-v': '--version',
        '-p': '--project',
        '-o': '--output',
        '-d': '--dir',
        '-mh': '--max-height',
        '-mw': '--max-width',
        '-ip': '--include-preview',
        '-ep': '--exclude-preview',
        '-r': '--radius',
        '-tr': '--top-radius',
        '-br': '--bottom-radius',
        '-sl': '--side-length',
        '-l': '--lan',
        '-c': '--curved',
        '-cf': '--circumference',
        '-coi': '--cross-origin-isolation',
    }, {
        argv: rawArgs.slice(2),
        permissive: true,
    });
    args._.map((arg) => arg.toLowerCase());
    const arg1 = args._[0] || '';
    const arg2 = args._[1] || '';
    const options = {
        initialise: {
            template: {
                initDirectory: arg2,
                framework: 'threejs',
                bundler: 'standalone',
                trackingType: 'face',
                language: 'javascript',
            },
            triggered: arg1 === 'init',
        },
        help: {
            triggered: args['--help'],
            command: arg2,
        },
        serve: {
            lan: args['--lan'],
            port: args['--port'],
            directory: arg2,
        },
        arg1,
        arg2,
        deployment: {
            version: args['--version'] || '',
            id: args['--project'] || '',
            directory: args['--dir'] || '',
            zipPath: '',
            triggered: arg1 === 'upload' || arg1 === 'publish',
            enableCrossOriginIsolation: args['--cross-origin-isolation'] || false,
        },
        training: {
            input: arg2,
            output: args['--output'] || '.',
            curved: args['--curved'],
            maxHeight: args['--max-height'],
            maxWidth: args['--max-width'],
            includePreview: args['--include-preview'],
            excludePreview: args['--exclude-preview'],
            radius: args['--radius'],
            topRadius: args['--top-radius'],
            bottomRadius: args['--bottom-radius'],
            sideLength: args['--side-length'],
            circumference: args['--circumference'],
            inputWidth: args['--input-width'],
            inputHeight: args['--input-height'],
            dpi: args['--dpi'],
        },
        zppClean: {
            input: arg2,
        },
        skipPrompts: args['--yes'],
    };
    return options;
}
async function promptForMissingInitOptions(options) {
    if (options.skipPrompts === true)
        return options;
    if (options.arg1) {
        const frameworkQuestion = {
            type: 'list',
            name: 'framework',
            message: 'Choose a 3D framework:',
            choices: ['ThreeJS', 'AFrame', 'BabylonJS', 'React-Three-Fiber'],
            default: 'ThreeJS',
        };
        const framework = await (0, inquirer_1.prompt)([frameworkQuestion]);
        options.initialise.template.framework = framework.framework;
        const bundlerQuestion = {
            type: 'list',
            name: 'bundler',
            message: 'Choose a bundler:',
            choices: framework.framework === 'React-Three-Fiber' ? ['Webpack'] : ['Webpack', 'Standalone HTML'],
            default: 'Webpack',
        };
        const bundler = await (0, inquirer_1.prompt)([bundlerQuestion]);
        options.initialise.template.bundler = bundler.bundler;
        const trackingTypeQuestion = {
            type: 'list',
            name: 'trackingType',
            message: 'Choose a tracking type:',
            choices: ['Face Tracking', 'Image Tracking', 'Instant Tracking'],
            default: 'Face Tracking',
        };
        const trackingType = await (0, inquirer_1.prompt)([trackingTypeQuestion]);
        options.initialise.template.trackingType = trackingType.trackingType;
        if ((options.initialise.template.bundler === 'Standalone HTML') || (framework.framework === 'AFrame')) {
            options.initialise.template.language = 'JavaScript';
            return options;
        }
        const languageQuestion = {
            type: 'list',
            name: 'language',
            message: 'Choose a language:',
            choices: ['JavaScript', 'TypeScript'],
            default: 'JavaScript',
        };
        const language = await (0, inquirer_1.prompt)([languageQuestion]);
        options.initialise.template.language = language.language;
    }
    return options;
}
async function promptForMissingDeploymentOptions(options) {
    const commandLineConfig = options.deployment;
    const packageConfig = await (0, packagejson_1.getPackageConfig)();
    let directorySource = 'cli';
    if (options.arg1 === 'upload' && commandLineConfig.directory === '') {
        const answer = await (0, inquirer_1.prompt)([{
                type: 'input',
                name: 'directory',
                message: 'Enter project directory: ',
                default: '.',
            },
            {
                type: 'confirm',
                name: 'coi',
                message: 'Enable cross-origin-isolation?',
                default: false,
            },
        ]);
        commandLineConfig.directory = answer.directory;
        commandLineConfig.enableCrossOriginIsolation = answer.coi;
        directorySource = 'userinput';
    }
    else if (options.arg1 === 'publish' && commandLineConfig.directory === '') {
        const answer = await (0, inquirer_1.prompt)([{
                type: 'input',
                name: 'directory',
                message: 'If you wish to upload and publish, please provide a directory. To only publish, leave blank: ',
                default: '',
            },
            {
                type: 'confirm',
                name: 'coi',
                message: 'Enable cross-origin-isolation?',
                default: false,
            }]);
        commandLineConfig.enableCrossOriginIsolation = answer.coi;
        commandLineConfig.directory = answer.directory;
        directorySource = 'userinput';
    }
    const storedConfig = (0, config_1.getStoredConfig)(commandLineConfig.directory);
    const mergedConfig = Object.assign(Object.assign({}, storedConfig), packageConfig.config);
    mergedConfig.directory = commandLineConfig.directory;
    mergedConfig.enableCrossOriginIsolation = commandLineConfig.enableCrossOriginIsolation;
    if (commandLineConfig.version && commandLineConfig.version.length > 0)
        mergedConfig.version = commandLineConfig.version;
    if (commandLineConfig.id && commandLineConfig.id.length > 0)
        mergedConfig.id = commandLineConfig.id;
    if (!commandLineConfig.id) {
        const answer = await (0, inquirer_1.prompt)([{
                type: 'input',
                name: 'id',
                message: 'Enter project ID: ',
                default: mergedConfig.id || '0000',
            }]);
        mergedConfig.id = answer.id;
    }
    if (!commandLineConfig.version) {
        const answer = await (0, inquirer_1.prompt)([{
                type: 'input',
                name: 'version',
                message: 'Enter a version number: ',
                default: mergedConfig.version || '0.0.0',
            }]);
        mergedConfig.version = answer.version;
    }
    const idSource = mergedConfig.id === commandLineConfig.id ? 'cli'
        : mergedConfig.id === packageConfig.config.id ? 'packagejson'
            : mergedConfig.id === storedConfig.id ? 'history' : 'userinput';
    const versionSource = mergedConfig.version === commandLineConfig.version ? 'cli'
        : mergedConfig.version === packageConfig.config.version ? 'packagejson'
            : mergedConfig.version === storedConfig.version ? 'history' : 'userinput';
    function consoleOutputForSource(source) {
        switch (source) {
            case 'cli': return '(from command line)';
            case 'packagejson': return '(from package.json)';
            case 'userinput': return '(from user input)';
            case 'history': return '(remembered from last time)';
            default: return '';
        }
    }
    console.log('');
    console.log(chalk.bold('= Summary ='));
    console.log('');
    console.log(`Project ID: ${chalk.blueBright(mergedConfig.id)}`, chalk.grey(consoleOutputForSource(idSource)));
    console.log(`Version: ${chalk.blueBright(mergedConfig.version)}`, chalk.grey(consoleOutputForSource(versionSource)));
    if (mergedConfig.directory) {
        console.log(`Upload from Directory: ${chalk.blueBright(path.resolve(mergedConfig.directory))}`, chalk.grey(consoleOutputForSource(directorySource)));
        console.log(`Enable cross-origin-isolation: ${chalk.blueBright(mergedConfig.enableCrossOriginIsolation)}`);
        const searcher = new fs_dfs_1.default(mergedConfig.directory, ['index.html', 'index.htm']);
        const results = await searcher.SearchFiles(2);
        if (!results.locatedInRoot) {
            console.log('');
            console.log(chalk.yellow("⚠️ WARNING You don't have 'index.htm' or 'index.html' in the provided directory."));
            if (results.fileLocation) {
                console.log('We did, however, find one in the following directory:', results.fileLocation);
            }
            console.log(`You may need to specify a correct ${chalk.yellow('--dir')} location, or ${chalk.yellow('cd')} to correct directory.`);
            console.log('If you continue, we\'ll upload from the original directory you specified.');
        }
    }
    console.log('');
    if (!options.skipPrompts) {
        const confirm = await (0, inquirer_1.prompt)([{
                type: 'confirm',
                name: 'confirmed',
                message: `Do you wish to continue with ${options.arg1.toUpperCase()}?`,
                default: false,
            }]);
        if (!confirm.confirmed)
            process.exit(0);
    }
    (0, config_1.setStoredConfig)(commandLineConfig.directory, mergedConfig);
    options.deployment = mergedConfig;
    return options;
}
async function handleRequests(options) {
    switch (options.arg1) {
        case 'init':
            new project_initialiser_1.default(options.initialise).clone();
            break;
        case 'train':
            (0, training_1.default)(options.training);
            break;
        case 'zppclean':
            (0, zpp_1.default)(options.zppClean.input);
            break;
        case 'serve':
            (0, serve_1.default)(options.serve);
            break;
        case 'help':
            (0, help_1.default)();
            break;
        case 'upload':
            await (0, deployments_1.upload)(options.deployment);
            break;
        case 'publish':
            await (0, deployments_1.publish)(options.deployment);
            break;
        case 'logout':
        case 'login':
            console.log('This feature is coming soon :-)');
            break;
        default:
            console.log(`\n${(0, chalk_1.bgRed)('ERR:')} Unknown command '${(0, chalk_1.red)(options.arg1)}'. '${(0, chalk_1.hex)('FF5733').bold('zapworks')} help'  ..for more info`);
            break;
    }
}
async function cli(args) {
    (0, update_notifier_1.default)();
    const parsedArguments = parseArgumentsIntoOptions(args);
    if (parsedArguments.initialise.triggered) {
        const options = await promptForMissingInitOptions(parsedArguments);
        await handleRequests(options);
    }
    else if (parsedArguments.deployment.triggered) {
        const options = await promptForMissingDeploymentOptions(parsedArguments);
        await handleRequests(options);
    }
    else {
        await handleRequests(parsedArguments);
    }
}
exports.cli = cli;
